<?php
declare(strict_types = 1);

/*
 * Copyright (C) 2018 Hanns Schulz-Mirbach, <http://www.schulz-mirbach.info/>
 *
 * This file is part of the ArtworkGallery program.
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or any later
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/gpl.html/>
 */

require_once ("./model/gallery.php");
require_once ("./model/artwork.php");
require_once ("./model/gallery_photo.php");
require_once ("./util/language.php");
require_once ("./util/formatter.php");
require_once ("./controller/translation_controller.php");
require_once ("./db/database.php");

class GalleryController
{

    private $gallery;

    private $database;

    public function __construct ()
    {
        $this->gallery = new Gallery();
        
        $this->database = new Database();
    }

    public function __destruct ()
    {
        $this->database = null;
    }

    public function getGallery (): Gallery
    {
        return $this->gallery;
    }

    public function setGallery (Gallery $gallery): void
    {
        $this->gallery = $gallery;
    }

    public function insertGallery (): int
    {
        $insertedTitle = $this->insertTranslation($this->gallery->getTitle());
        
        $this->gallery->setTitle($insertedTitle);
        
        $insertedDescription = $this->insertTranslation(
                $this->gallery->getDescription());
        
        $this->gallery->setDescription($insertedDescription);
        
        $affectedRows = $this->database->insertGallery($this->gallery);
        return $affectedRows;
    }

    public function insertGalleryAndPhotos (): int
    {
        $insertedTitle = $this->insertTranslation($this->gallery->getTitle());
        
        $this->gallery->setTitle($insertedTitle);
        
        $insertedDescription = $this->insertTranslation(
                $this->gallery->getDescription());
        
        $this->gallery->setDescription($insertedDescription);
        
        $affectedRows = $this->database->insertGallery($this->gallery);
        
        // the previous insert has updated this->gallery with the gallery id
        // generated by the database
        
        foreach ($this->gallery->getGalleryPhotos() as $galleryPhoto) {
            $galleryPhoto->setGalleryId($this->gallery->getId());
            $affectedRows += $this->insertGalleryPhoto($galleryPhoto);
        }
        
        return $affectedRows;
    }

    public function updateGallery (): int
    {
        $affectedRowsTitle = $this->updateTranslation(
                $this->gallery->getTitle());
        
        $affectedRowsDescription = $this->updateTranslation(
                $this->gallery->getDescription());
        
        $affectedRows = $this->database->updateGallery($this->gallery);
        return $affectedRows;
    }

    public function updateGalleryAndPhotos (): int
    {
        $affectedRowsTitle = $this->updateTranslation(
                $this->gallery->getTitle());
        
        $affectedRowsDescription = $this->updateTranslation(
                $this->gallery->getDescription());
        
        $affectedRows = $this->database->updateGallery($this->gallery);
        
        $affectedRows += $this->deleteAllGalleryPhotos();
        
        $affectedRows += $this->insertAllGalleryPhotos();
        
        return $affectedRows;
    }

    public function deleteGallery (): int
    {
        $affectedRowsTitle = $this->deleteTranslation(
                $this->gallery->getTitle());
        
        $affectedRowsDescription = $this->deleteTranslation(
                $this->gallery->getDescription());
        
        $affectedRows = $this->deleteAllGalleryPhotos();
        
        $affectedRows += $this->database->deleteGallery($this->gallery);
        
        return $affectedRows;
    }

    public function getAllGalleries (): array
    {
        $allGalleries = $this->database->getAllGalleries();
        
        return $allGalleries;
    }

    public function getGalleryById (int $galleryId): Gallery
    {
        $gallery = $this->database->getGalleryById($galleryId);
        return $gallery;
    }

    public function getAllGalleriesGui (TranslationController $tc,
            Formatter $formatter): string
    {
        $guiHeader = '<div class="image-set">';
        $guiBody = "";
        $targetUrlPart = "gallery_show.php?id=";
        
        $allGalleries = $this->getAllGalleries();
        
        foreach ($allGalleries as $gallery) {
            $gallery->setlanguage($tc->getLanguage());
            $targetUrl = $targetUrlPart . $gallery->getId();
            
            $galleryGui = '<a  href="' . $targetUrl . '">' .
                     $gallery->getTitle()->getTextForLanguage() . '</a>';
            $guiBody .= $galleryGui;
        }
        
        $guiFooter = '</div><br/><br/><br/>';
        
        $allGalleriesGui = $guiHeader . $guiBody . $guiFooter;
        return $allGalleriesGui;
    }

    public function getGalleryGui (TranslationController $tc,
            Formatter $formatter): string
    {
        $this->gallery->setLanguage($tc->getLanguage());
        
        $guiHeader = '<div class="image-set">';
        $guiBody = "";
        
        $galleryPhotos = $this->gallery->getGalleryPhotos();
        
        foreach ($galleryPhotos as $galleryPhoto) {
            $artwork = $galleryPhoto->getPhoto()->getArtwork();
            $artwork->setLanguage($tc->getLanguage());
            $title = $artwork->getTitle()->getTextForLanguage();
            $pathToExistingFile = "./image/" .
                     $galleryPhoto->getPhoto()->getFilename();
            $filePath = $pathToExistingFile . '?hash=' .
                     filemtime($pathToExistingFile);
            $urlShowArtwork = "artwork_show.php?id=" . $artwork->getId();
            $captionLink = '<a href="' . $urlShowArtwork . '">' . $title . '</a>';
            
            $photoGui = '<figure><a class = "thumbnail" href="' . $filePath .
                     '" data-lightbox="' . $this->gallery->getTitle()->getTextForLanguage() .
                     '" data-title="' . $title . '">' .
                     '<img alt="Foto File Name ' .
                     $galleryPhoto->getPhoto()->getFilename() . '" src="' .
                     $filePath . '"/> </a><figcaption>' . $captionLink .
                     '</figcaption></figure>';
            
            $guiBody .= $photoGui;
        }
        
        $guiFooter = '</div>';
        
        $galleryGui = $guiHeader . $guiBody . $guiFooter;
        return $galleryGui;
    }

    private function insertTranslation (Translation $translation): Translation
    {
        $language = new Language();
        $translationController = new TranslationController($language);
        $translationController->setTranslation($translation);
        $affectedRows = $translationController->insertTranslation();
        
        $insertedTranslation = $translationController->getTranslationById(
                $translationController->getTranslation()
                    ->getId());
        
        return $insertedTranslation;
    }

    private function updateTranslation (Translation $translation): int
    {
        $language = new Language();
        $translationController = new TranslationController($language);
        $translationController->setTranslation($translation);
        $affectedRows = $translationController->updateTranslation();
        return $affectedRows;
    }

    private function deleteTranslation (Translation $translation): int
    {
        $language = new Language();
        $translationController = new TranslationController($language);
        $translationController->setTranslation($translation);
        $affectedRows = $translationController->deleteTranslation();
        return $affectedRows;
    }

    private function insertGalleryPhoto (GalleryPhoto $galleryPhoto): int
    {
        return $this->database->insertGalleryPhoto($galleryPhoto);
    }

    private function updateGalleryPhoto (GalleryPhoto $galleryPhoto): int
    {
        return $this->database->updateGalleryPhoto($galleryPhoto);
    }

    private function deleteGalleryPhoto (GalleryPhoto $galleryPhoto): int
    {
        return $this->database->deleteGalleryPhoto($galleryPhoto);
    }

    private function insertAllGalleryPhotos (): int
    {
        $affectedRows = 0;
        
        foreach ($this->gallery->getGalleryPhotos() as $galleryPhoto) {
            $affectedRows += $this->insertGalleryPhoto($galleryPhoto);
        }
        
        return $affectedRows;
    }

    private function deleteAllGalleryPhotos (): int
    {
        return $this->database->deleteAllPhotosForGallery($this->gallery);
    }
}

?>